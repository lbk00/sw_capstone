
buildscript {
    ext {
        queryDslVersion = '5.0.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.example.capstone'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.tensorflow:tensorflow-core-api:0.4.0'
    implementation 'org.tensorflow:tensorflow-core-platform:0.4.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.springframework.boot:spring-boot-starter-mail'//주문서 알림을 위한 웹소켓
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"

    implementation 'org.tensorflow:tensorflow-core-api:0.4.0'
    implementation 'org.tensorflow:tensorflow-core-platform:0.4.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    //implementation 'org.tensorflow:tensorflow:2.17.0'


    //이메일
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //주문서 알림을 위한 웹소켓
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    annotationProcessor(

            "jakarta.persistence:jakarta.persistence-api",

            "jakarta.annotation:jakarta.annotation-api",

            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

}

tasks.named('test') {
    useJUnitPlatform()
}
def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install' }
    else {
        commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}

compileJava.dependsOn('clean')