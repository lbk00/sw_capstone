{"version":3,"file":"static/js/529.74f9d4f1.chunk.js","mappings":"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","sources":["api/OrderApi.js","components/Order/AddComponent.js","components/Order/AddPage.js","components/Order/ListComponent.js","components/Order/ListPage.js","components/Order/ModifyComponent.js","components/Order/ModifyPage.js","components/Order/ReadComponent.js","components/Order/ReadPage.js","components/common/ResultModal.js","hooks/useCustomMove.js"],"sourcesContent":["import axios from \"axios\"\n\n\nexport const API_SERVER_HOST = 'http://localhost:8080'\nconst prefix = `${API_SERVER_HOST}/api/orders`\n\nexport const getOne = async (id) => {\n  const res = await axios.get(`${prefix}/${id}`)\n  return res.data\n}\n\nexport const getList = async (pageParam) => {\n  const {page, size} = pageParam\n  const res = await axios.get(`${prefix}/list`, {params: {page: page, size: size}})\n  return res.data\n}\n\nexport const postAdd = async (orderObj) => {\n  const res = await axios.post(`${prefix}/`, orderObj)\n  return res.data\n}\n\nexport const deleteOne = async (id) => {\n  const res = await axios.delete(`${prefix}/${id}`)\n  return res.data\n}\n\nexport const putOne = async (order) => {\n  const res = await axios.put(`${prefix}/${order.id}`, {\n    id: order.id,\n    orderedProducts: order.orderedProducts,\n    totalPrice: order.totalPrice,\n    orderType: order.orderType,\n    pageRequestDTO: order.pageRequestDTO,\n    total: order.total\n  })\n  return res.data\n}","import React, { useState } from \"react\";\r\nimport { postAdd } from \"../../api/OrderApi\";\r\nimport ResultModal from \"../common/ResultModal\";\r\nimport useCustomMove from \"../../hooks/useCustomMove\";\r\nimport { TextField, Button, Box } from '@mui/material';\r\nimport axios from 'axios';\r\n\r\n\r\nconst initState = {\r\n\r\n    orderType : '',\r\n    orderedProducts : '',\r\n    totalAmount : '',\r\n    totalPrice : '',\r\n\r\n\r\n\r\n}\r\n\r\nconst AddComponent = () => {\r\n\r\n\r\n    const [order, setOrder] = useState({\r\n        orderedProducts: '',  // 제품 ID들을 입력받을 필드\r\n        totalAmount: ''       // 수량을 입력받을 필드\r\n    });\r\n\r\n    const handleChangeOrder = (e) => {\r\n        const { name, value } = e.target;\r\n        setOrder((prevOrder) => ({\r\n            ...prevOrder,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleClickAdd = async () => {\r\n        // 여러 제품을 처리하기 위해 orderedProducts와 totalAmount를 분리\r\n        const products = order.orderedProducts.split(',').map((id, index) => ({\r\n            id: Number(id.trim()),         // 제품 ID를 숫자로 변환\r\n            amount: Number(order.totalAmount.split(',')[index].trim())  // 수량을 숫자로 변환\r\n        }));\r\n\r\n        try {\r\n            // POST 요청을 통해 서버로 주문 데이터 전송\r\n            const response = await axios.post('http://localhost:8080/api/orders/create', products);\r\n            alert('주문서 생성이 완료되었습니다.');\r\n            window.location.href = 'http://localhost:3000/dashboard';\r\n            console.log('Order successfully created:', response.data);\r\n        } catch (error) {\r\n            console.error('There was an error creating the order!', error);\r\n        }\r\n    };\r\n    const [result, setResult] = useState(null)\r\n    const {moveToList} = useCustomMove()\r\n\r\n\r\n    const closeModal = () => {\r\n        setResult(null)\r\n        moveToList()\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ '& > :not(style)': { m: 1 } }}>\r\n            {result ? <ResultModal title={'Add Result'} content={`New ${result} Added`} callbackFn={closeModal}/>: <></>}\r\n            <TextField\r\n                label=\"Product\"\r\n                variant=\"outlined\"\r\n                name=\"orderedProducts\"\r\n                value={order.orderedProducts}\r\n                onChange={handleChangeOrder}\r\n                placeholder=\"Enter product IDs (e.g., 33, 34)\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n            />\r\n            <TextField\r\n                label=\"Amount\"\r\n                variant=\"outlined\"\r\n                name=\"totalAmount\"\r\n                value={order.totalAmount}\r\n                onChange={handleChangeOrder}\r\n                placeholder=\"Enter amounts (e.g., 15, 20)\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n            />\r\n            <Button variant=\"contained\" onClick={handleClickAdd}>\r\n                등록\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default AddComponent;","import React from 'react';\r\nimport AddComponent from './AddComponent';\r\nimport { Container, Typography } from '@mui/material';\r\n\r\nconst AddPage = () => {\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <AddComponent />\r\n        </Container>\r\n    );\r\n}\r\nexport default AddPage;","import { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { getList } from \"../../api/OrderApi\";\r\nimport useCustomMove from \"../../hooks/useCustomMove\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport ReadComponent from './ReadComponent';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Modal from '@mui/material/Modal';\r\nimport Box from '@mui/material/Box';\r\nimport ReadPage from './ReadPage';\r\nimport { Button, List, ListItem, ListItemText } from '@mui/material';\r\n\r\nconst initState = {\r\n  dtoList:[], pageNumList:[], pageRequestDTO: null, prev: false, next: false,\r\n  totoalCount: 0, prevPage: 0, nextPage: 0, totalPage: 0, current: 0\r\n}\r\n\r\nconst ListComponent = ({ onRowClick , orderType, setOrderType}) => {\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [selectedId, setSelectedId] = useState(null);\r\n  const {moveToRead, page, size, refresh, moveToList} = useCustomMove();\r\n  const [serverData, setServerData] = useState(initState)\r\n  const [order, setOrder] = useState([]);\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const handleRowClick = (order) => {\r\n    setSelectedId(order.id);\r\n    setOpenModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getList({page,size}).then(data => {\r\n      console.log(data)\r\n      setServerData(data)\r\n      setOrder(data.dtoList) // setOrder function\r\n      console.log(data.dtoList)\r\n    })\r\n        .catch(error => {\r\n          console.error('Error fetching data: ', error);\r\n          setOrder([]); // API 호출 실패 시 order를 빈 배열로 설정\r\n        });\r\n  }, [page,size, refresh]);\r\n\r\n  const movePage = (page) => {\r\n    getList({ page, size }).then(data => {\r\n      setServerData(data);\r\n      setOrder(data.dtoList);\r\n    }).catch(error => {\r\n      console.error('Error fetching data: ', error);\r\n      setOrder([]);\r\n    });\r\n  };\r\n\r\n  return (\r\n      <div className=\"border-2 border-blue-100 mt-10 mr-2 ml-2\">\r\n        <div className=\"flex flex-wrap mx-auto justify-center p-6\">\r\n          <TableContainer component={Paper}>\r\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"right\">주문 ID</TableCell>\r\n                  <TableCell align=\"right\">주문종류</TableCell>\r\n                  <TableCell align=\"right\">주문한 상품</TableCell>\r\n                  <TableCell align=\"right\">총 수량</TableCell>\r\n                  <TableCell align=\"right\">총가격</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {order.length > 0 ? order.map(order =>\r\n                    <TableRow\r\n                        key={order.id}\r\n                        onClick={() => {\r\n                          handleRowClick(order);\r\n                          console.log(`Row clicked with id: ${order.id}`); // 로깅하여 확인\r\n                          onRowClick(order.id);\r\n                        }}\r\n                        style={{ cursor: 'pointer' }}\r\n                    >\r\n                      <TableCell align=\"right\">{order.id}</TableCell>\r\n                      <TableCell align=\"right\">{order.orderType}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {order.orderedProducts.map((product, index) => (\r\n                            <p key={index}>{product.name}</p>\r\n                        ))}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{order.totalAmount}</TableCell>\r\n                      <TableCell align=\"right\">{order.totalPrice}</TableCell>\r\n                    </TableRow>\r\n                ) : <TableRow><TableCell colSpan={9}>No data</TableCell></TableRow>}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', m: 1, p: 1 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', m: 1, p: 1 }}>\r\n            {serverData.prev ?\r\n              <Button variant=\"contained\" color=\"primary\" onClick={() => movePage(serverData.prevPage)}>\r\n                Prev\r\n              </Button> : null}\r\n            {serverData.pageNumList.map(pageNum =>\r\n              <Button key={pageNum} variant=\"contained\" color={serverData.current === pageNum ? 'secondary' : 'primary'} onClick={() => movePage(pageNum)}>\r\n                {pageNum}\r\n              </Button>\r\n            )}\r\n            {serverData.next ?\r\n              <Button variant=\"contained\" color=\"primary\" onClick={() => movePage(serverData.nextPage)}>\r\n                Next\r\n              </Button> : null}\r\n          </Box>\r\n          <List>\r\n            {serverData.dtoList.map((item, index) => (\r\n              <ListItem key={index}>\r\n                <ListItemText primary={item.name} secondary={item.description} /> {/* Adjust according to your data structure */}\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n        <Modal\r\n            open={openModal}\r\n            onClose={handleCloseModal}\r\n        >\r\n          <Box sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            width: '35vw',\r\n            height: '90vh',\r\n            overflow: 'auto',\r\n            bgcolor: 'background.paper',\r\n          }}>\r\n            {selectedId && <ReadPage id={selectedId} />}\r\n          </Box>\r\n        </Modal>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ListComponent;","import React , { useState }  from \"react\";\r\nimport {Link, useSearchParams} from \"react-router-dom\";\r\nimport { Box, Modal,Select, MenuItem, FormControl, InputLabel } from '@mui/material';\r\nimport ListComponent from \"./ListComponent\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AddPage from \"./AddPage\";\r\n\r\n\r\n  const ListPage = () => {\r\n      const [orderType, setOrderType] = useState('option1'); // 선택된 옵션을 관리하는 상태\r\n\r\n      const [open, setOpen] = useState(false);\r\n\r\n      const handleOpen = () => setOpen(true);\r\n      const handleClose = () => setOpen(false);\r\n      const modalStyle = {\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          width: 400,\r\n          bgcolor: 'background.paper',\r\n          border: '2px solid #000',\r\n          boxShadow: 24,\r\n          p: 4,\r\n      };\r\n      const handleChange = (event) => {\r\n          setOrderType(event.target.value);\r\n      };\r\n\r\n    const [queryParams] = useSearchParams()\r\n    const page = queryParams.get(\"page\") ||1\r\n    const size = queryParams.get(\"size\") ||10\r\n    const handleRowClick = (id) => {\r\n        console.log(`Row with id ${id} was clicked`);\r\n        // 여기에 행 클릭 시 수행할 작업을 추가합니다.\r\n      };\r\n\r\n    return (\r\n    <div className=\"p-4 w-full bg-orange-200 \">\r\n     <div className=\"text-3xl font-extrabold\">\r\n       주문서 관리\r\n     </div>\r\n     <ListComponent onRowClick={handleRowClick} />\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2, gap: 2 }}>\r\n            <FormControl fullWidth variant=\"outlined\" sx={{ width: '8%', '&:hover': { bgcolor: 'gray' }, ml: 60 }}>\r\n                <InputLabel sx={{\r\n                    '&.Mui-focused': {\r\n                        color: 'black', // 포커스 시 라벨 색상\r\n                    },\r\n                }}>주문서 종류</InputLabel>\r\n                <Select\r\n                    value={orderType}\r\n                    onChange={handleChange}\r\n                    label=\"주문서 종류\"\r\n                    MenuProps={{\r\n                        PaperProps: {\r\n                            sx: {\r\n                                marginTop: '-160px',\r\n                                '& .MuiMenuItem-root': {\r\n                                },\r\n                            },\r\n                        },\r\n                    }}\r\n                    sx={{\r\n                        '& .MuiOutlinedInput-notchedOutline': {\r\n                            borderColor: 'gray',\r\n                        },\r\n                        '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                            borderColor: 'gray',\r\n                        },\r\n                        '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                            color : 'black',\r\n                            borderColor: 'gray', // 포커스 시 테두리 색상 유지\r\n                        },\r\n                        '& .MuiSvgIcon-root': {\r\n                        },\r\n                    }}\r\n                >\r\n                    {/*< 0 = 주문 전, 1 = 주문 중 , 2 = 납품(주문) 완료 , 3 = 반품 중 , 4 = 반품 완료 , 5 = 취소>*/}\r\n                    <MenuItem value=\"option1\">전체</MenuItem>\r\n                    <MenuItem value=\"option2\">주문 전</MenuItem>\r\n                    <MenuItem value=\"option3\">주문 중</MenuItem>\r\n                    <MenuItem value=\"option4\">주문 완료</MenuItem>\r\n                    <MenuItem value=\"option5\">반품 처리</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <Button\r\n                sx={{ bgcolor: 'gray', color: 'white', width: '8%', '&:hover': { bgcolor: 'gray' }, mr: 60 }}\r\n                variant=\"contained\"\r\n                onClick={handleOpen}\r\n            >\r\n                주문서 등록\r\n            </Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={modalStyle}>\r\n                    <h2 id=\"modal-modal-title\">주문서 등록</h2>\r\n                    <p id=\"modal-modal-description\">\r\n                        <AddPage/>\r\n                    </p>\r\n                    {/* 주문서 등록 폼이나 기타 내용 */}\r\n                </Box>\r\n            </Modal>\r\n        </Box>\r\n\r\n\r\n    </div>\r\n    );\r\n  }\r\nexport default ListPage;","import React, { useState } from \"react\";\r\nimport { postAdd } from \"../../api/OrderApi\";\r\nimport ResultModal from \"../common/ResultModal\";\r\nimport useCustomMove from \"../../hooks/useCustomMove\";\r\nimport { TextField, Button, Box } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst initState = {\r\n\r\n    orderType : '',\r\n    orderedProducts : '',\r\n    totalAmount : '',\r\n    totalPrice : '',\r\n\r\n\r\n\r\n}\r\n\r\nconst ModifyComponent = ({id}) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [order, setOrder] = useState({\r\n        orderedProducts: '',  // 제품 ID들을 입력받을 필드\r\n        totalAmount: ''       // 수량을 입력받을 필드\r\n    });\r\n\r\n    const handleChangeOrder = (e) => {\r\n        const { name, value } = e.target;\r\n        setOrder((prevOrder) => ({\r\n            ...prevOrder,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleClickUpdate = async () => {\r\n        // 제품 ID와 수량을 배열로 변환\r\n        const productIds = order.orderedProducts.split(',').map(id => Number(id.trim()));\r\n        const amounts = order.totalAmount.split(',').map(amount => Number(amount.trim()));\r\n\r\n        const payload = {\r\n            id: productIds,      // 제품 ID 배열\r\n            amount: amounts      // 수량 배열\r\n        };\r\n\r\n        try {\r\n            // PUT 요청을 통해 서버로 수정된 주문 데이터 전송\r\n            const response = await axios.put(`http://localhost:8080/api/orders/${id}`, payload);\r\n            alert('주문서가 성공적으로 수정되었습니다.');\r\n            window.location.href = 'http://localhost:3000/dashboard';\r\n            console.log('Order successfully updated:', response.data);\r\n        } catch (error) {\r\n            console.error('There was an error updating the order!', error);\r\n        }\r\n    };\r\n    const [result, setResult] = useState(null)\r\n    const {moveToList} = useCustomMove()\r\n\r\n\r\n    const closeModal = () => {\r\n        setResult(null)\r\n        moveToList()\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ '& > :not(style)': { m: 1 } }}>\r\n            {result ? <ResultModal title={'Add Result'} content={`New ${result} Added`} callbackFn={closeModal}/>: <></>}\r\n            <TextField\r\n                label=\"Amount\"\r\n                variant=\"outlined\"\r\n                name=\"totalAmount\"\r\n                value={order.totalAmount}\r\n                onChange={handleChangeOrder}\r\n                placeholder=\"Enter amounts (e.g., 1, 5)\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n            />\r\n            <Button variant=\"contained\" onClick={handleClickUpdate}>\r\n                수정\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ModifyComponent;","import { useParams } from \"react-router-dom\";\r\nimport ModifyComponent from \"./ModifyComponent\";\r\n\r\nconst ModifyPage = ({id}) => {\r\n\r\n    //const {id} = useParams()\r\n\r\n    return (\r\n        <div className=\"p-4 w-full bg-white\">\r\n            <ModifyComponent id={id}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModifyPage;","import { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { getOne } from \"../../api/OrderApi\"\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport  useCustomMove  from \"../../hooks/useCustomMove\";\r\nimport * as OrderApi from '../../api/OrderApi.js';\r\nimport Modal from '@mui/material/Modal';\r\nimport Box from '@mui/material/Box';\r\nimport axios from 'axios';\r\n\r\nconst initState = {\r\n    id: 0,\r\n    orderedProducts: '',\r\n    totalPrice: '',\r\n    orderType: '',\r\n    totalAmount:'',\r\n    manager: '',\r\n}\r\n\r\nfunction ReadComponent({ id  }) {\r\n\r\n    const [order, setOrder] = useState(initState);\r\n    const [supplier, setSupplier] = useState(initState);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const {moveToList, moveToModify} = useCustomMove();\r\n\r\n\r\n    const handleOpenModal = () => {\r\n        setOpenModal(true);\r\n      };\r\n\r\n      const handleCloseModal = () => {\r\n        setOpenModal(false);\r\n      };\r\n\r\n    useEffect(() => {\r\n        // API에서 주문서 정보를 가져오는 함수\r\n        const fetchOrderDetails = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/orders/${id}`);\r\n                setOrder(response.data); // 주문서 데이터를 상태로 저장\r\n                const supplierResponse = await axios.get(`http://localhost:8080/api/manager/${response.data.manager}`);\r\n                setSupplier(supplierResponse.data); // 공급업체 데이터를 상태로 저장\r\n\r\n            } catch (error) {\r\n                console.error('Error fetching the order details:', error);\r\n            }\r\n        };\r\n\r\n        fetchOrderDetails(); // useEffect 호출 시 데이터를 가져옴\r\n    }, [id]);\r\n\r\n\r\n    let totalPrice = 0;\r\n    // Check if order exists and orderedProducts is an array\r\n    if (!order || !Array.isArray(order.orderedProducts)) {\r\n        return <div>Loading...</div>; // Handle loading or error state\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div>\r\n                <h1>납품 요청 내역</h1>\r\n                <p>주문번호 : <b>{order.id}</b></p>\r\n                <p>주문일자 : <b>{new Date().toLocaleString()}</b></p> {/* Display current date and time */}\r\n                <h3>주문정보</h3>\r\n                <hr style={{border: '1px solid black', width: '450px', marginLeft: 0}}/>\r\n                <p>수신인 : {supplier.mname}</p>\r\n                <p>연락처 : {supplier.mtel}</p>\r\n                <h3>주문상품</h3>\r\n\r\n                {order.orderedProducts.map((product) => {\r\n                    // Update total price\r\n                    totalPrice += product.price * product.amount;\r\n\r\n                    return (\r\n                        <div key={product.id}>\r\n                            <hr style={{border: '0.1px groove gray', width: '450px', marginLeft: 0}}/>\r\n                            <div style={{display: 'flex', alignItems: 'center', marginBottom: '10px'}}>\r\n                                <img\r\n                                    src={product.itemImage\r\n                                        ? require(`../../sample/${product.itemImage}`)// 템플릿 리터럴을 사용하여 이미지 경로 설정\r\n                                        : require('../../sample/sample1.png')// 기본 이미지 경로\r\n                                    }\r\n                                    alt=\"상품 이미지\"\r\n                                    style={{width: '100px', height: 'auto', marginRight: '10px'}}\r\n                                />\r\n                                <div style={{marginLeft: '10px'}}>\r\n                                    <p style={{margin: 0}}>상품명 : {product.name}</p>\r\n                                    <p style={{margin: 0}}>상품유형 : {product.itemType}</p>\r\n                                    <p style={{margin: 0}}>사이즈 : {product.size}</p>\r\n                                    <p style={{margin: 0}}>주문수량 : {product.amount}</p>\r\n                                    <p style={{margin: 0}}>주문금액 : {product.price} 원</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n\r\n                <hr style={{border: '1px solid black', width: '450px', marginLeft: 0}}/>\r\n                <h2>총 주문금액 : {totalPrice} 원</h2>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default ReadComponent;","import React, {useEffect, useState} from \"react\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport ReadComponent from \"./ReadComponent\";\r\nimport { Typography, Paper, Box, Modal, Button , Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\r\nimport axios from 'axios';\r\nimport AddPage from \"./AddPage\";\r\nimport ModifyPage from \"./ModifyPage\";\r\n\r\n\r\nconst initState = {\r\n    id: 0,\r\n    orderedProducts: '',\r\n    totalPrice: '',\r\n    orderType: '',\r\n    totalAmount:'',\r\n    manager: '',\r\n}\r\n\r\nconst ReadPage = ({ id }) => {\r\n  //const { id } = useParams(); // URL 파라미터에서 주문서의 ID를 가져옵니다.\r\n  const [open, setOpen] = useState(false); // 모달창의 상태를 관리하는 상태를 생성합니다.\r\n    const [order, setOrder] = useState(initState);\r\n    const handleOpen = () => setOpen(true); // 모달창을 열기 위한 함수를 생성합니다.\r\n    const handleClose = () => setOpen(false); // 모달창을 닫기 위한 함수를 생성합니다.\r\n    // 주문 확인 모달 상태 관리\r\n    const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n    const handleConfirmOpen = () => setConfirmOpen(true);\r\n    const handleConfirmClose = () => setConfirmOpen(false);\r\n\r\n    // 주문하기 확인 후 처리\r\n    const handleConfirmOrder = () => {\r\n        orderAssign(id); // 주문 처리 함수 실행\r\n        setConfirmOpen(false); // 모달 닫기\r\n    };\r\n\r\n    const [modifyOpen, setModifyOpen] = useState(false);\r\n    const handleModifyOpen = () => setModifyOpen(true);\r\n    const handleModifyClose = () => setModifyOpen(false);\r\n\r\n    // 삭제 모달 상태 관리\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n\r\n    const modalStyle = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #000',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        orderDelete(id); // 삭제 함수 호출\r\n        handleClose(); // 모달 닫기\r\n    };\r\n    const orderAssign = async (id) => {\r\n        try {\r\n          await axios.get(`http://localhost:8080/api/orders/order/${id}`); // 백엔드 서버의 주소와 경로를 적절히 수정해야 합니다.\r\n          alert('주문이 완료되었습니다.');\r\n        } catch (error) {\r\n          console.error('주문 중 오류가 발생했습니다:', error);\r\n        }\r\n      };\r\n\r\n\r\n    const orderComplete = async (id) => {\r\n        try {\r\n            await axios.get(`http://localhost:8080/api/orders/complete/${id}`); // 백엔드 서버의 주소와 경로를 적절히 수정해야 합니다.\r\n            alert('납품이 완료되었습니다.');\r\n        } catch (error) {\r\n            console.error('납품 중 오류가 발생했습니다:', error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        // API에서 주문서 정보를 가져오는 함수\r\n        const fetchOrderDetails = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/orders/${id}`);\r\n                setOrder(response.data); // 주문서 데이터를 상태로 저장\r\n            } catch (error) {\r\n                console.error('Error fetching the order details:', error);\r\n            }\r\n        };\r\n\r\n        fetchOrderDetails(); // useEffect 호출 시 데이터를 가져옴\r\n    }, [id]);\r\n\r\n    const orderDelete = async (id) => {\r\n        try {\r\n            await axios.delete(`http://localhost:8080/api/orders/${id}`);\r\n            alert('삭제가 완료되었습니다.');\r\n        } catch (error) {\r\n            console.error('삭제 중 오류가 발생했습니다:', error);\r\n        }\r\n    };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 6 }}>\r\n      <Typography variant=\"h4\" component=\"div\" gutterBottom>\r\n        Order Receipt\r\n      </Typography>\r\n      <Paper elevation={3} sx={{ p: 2, width: '500px', mt: 2 }}>\r\n        <ReadComponent id={id} /> {/* 주문서의 ID를 ReadComponent 컴포넌트에 prop으로 전달합니다. */}\r\n      </Paper>\r\n        {order.orderType === 'BEFORE_ORDER' && (\r\n          <Box mt={2}> {/* 주문하기 버튼에 상단 마진을 추가합니다. */}\r\n              {/* 주문하기 버튼 */}\r\n              <Button\r\n                  sx={{ bgcolor: 'gray', color: 'white', '&:hover': { bgcolor: 'gray' }, mb: 4, mt: 2, ml: 3, mr: 3 }}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleConfirmOpen} // 모달 열기\r\n              >\r\n                  주문하기\r\n              </Button>\r\n\r\n              {/* 주문 확인 모달 */}\r\n              <Dialog\r\n                  open={confirmOpen}\r\n                  onClose={handleConfirmClose}\r\n                  aria-labelledby=\"confirm-dialog-title\"\r\n                  aria-describedby=\"confirm-dialog-description\"\r\n              >\r\n                  <DialogTitle id=\"confirm-dialog-title\">주문 확인</DialogTitle>\r\n                  <DialogContent>\r\n                      <DialogContentText id=\"confirm-dialog-description\">\r\n                          정말 주문하시겠습니까?\r\n                      </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                      <Button onClick={handleConfirmOrder} color=\"primary\" autoFocus>\r\n                          예\r\n                      </Button>\r\n                      <Button onClick={handleConfirmClose} color=\"primary\">\r\n                          아니오\r\n                      </Button>\r\n                  </DialogActions>\r\n              </Dialog>\r\n                  <Button sx={{ bgcolor: 'gray', color: 'white','&:hover': { bgcolor: 'gray' },mb : 4, mt : 2, ml : 3 , mr : 3}}\r\n                          variant=\"contained\" color=\"primary\"\r\n                          onClick={handleModifyOpen}\r\n                          type=\"button\">\r\n                      주문 수정\r\n                  </Button>\r\n                  <Modal\r\n                      open={modifyOpen}\r\n                      onClose={handleModifyClose}\r\n                      aria-labelledby=\"modal-modal-title\"\r\n                      aria-describedby=\"modal-modal-description\"\r\n                  >\r\n                      <Box sx={modalStyle}>\r\n                          <h2 id=\"modal-modal-title\">주문서 수정</h2>\r\n                          <p id=\"modal-modal-description\">\r\n                              <ModifyPage id={id}/>\r\n                          </p>\r\n                          {/* 주문서 등록 폼이나 기타 내용 */}\r\n                      </Box>\r\n                  </Modal>\r\n              <Button\r\n                  sx={{\r\n                      bgcolor: 'gray',\r\n                      color: 'white',\r\n                      '&:hover': { bgcolor: 'gray' },\r\n                      mb: 4,\r\n                      mt: 2,\r\n                      ml: 3,\r\n                      mr: 3\r\n                  }}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleOpen} // 모달 열기\r\n              >\r\n                  주문 삭제\r\n              </Button>\r\n\r\n              {/* 삭제 확인 모달 */}\r\n              <Dialog open={open} onClose={handleClose}>\r\n                  <DialogTitle>주문 삭제</DialogTitle>\r\n                  <DialogContent>\r\n                      <DialogContentText>\r\n                          정말 삭제하시겠습니까?\r\n                      </DialogContentText>\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                      <Button onClick={handleDelete} color=\"primary\" autoFocus>\r\n                          예\r\n                      </Button>\r\n                      <Button onClick={handleClose} color=\"primary\">\r\n                          아니오\r\n                      </Button>\r\n                  </DialogActions>\r\n              </Dialog>\r\n                  </Box>\r\n            )}\r\n        {order.orderType === 'PROGRESS_ORDER' && (\r\n            <Box mt={2}>\r\n                <Button sx={{ bgcolor: 'gray', color: 'white','&:hover': { bgcolor: 'gray' },mb : 4, mt : 2 , ml : 3 , mr : 3}}\r\n                        variant=\"contained\" color=\"primary\" onClick={() => orderComplete(id)}>\r\n                    납품 처리\r\n                </Button>\r\n                <Button sx={{ bgcolor: 'gray', color: 'white','&:hover': { bgcolor: 'gray' },mb : 4, mt : 2 , ml : 3 , mr : 3}}\r\n                        variant=\"contained\" color=\"primary\">\r\n                    반품 처리\r\n                </Button>\r\n            </Box>\r\n        )}\r\n        {order.orderType === 'RETURNING' && (\r\n            <Box mt={2}>\r\n                <Button sx={{ bgcolor: 'gray', color: 'white','&:hover': { bgcolor: 'gray' },mb : 4, mt : 2 , ml : 3 , mr : 3}}\r\n                        variant=\"contained\" color=\"primary\" onClick={() => orderComplete(id)}>\r\n                    납품 처리\r\n                </Button>\r\n            </Box>\r\n        )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ReadPage;","import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography } from '@mui/material';\n\nconst ResultModal = ({ title, content, callbackFn }) => {\n  return (\n    <Dialog\n      open={true}\n      onClose={callbackFn}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <Typography variant=\"h4\" component=\"div\">\n          {content}\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={callbackFn} color=\"primary\" autoFocus>\n          Close Modal\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ResultModal;","import { useCallback, useState } from \"react\"\nimport { createSearchParams, useNavigate, useSearchParams } from \"react-router-dom\"\n\n\n\nconst getNum = (param, defaultValue) => {\n\n    if(!param){\n    return defaultValue\n    }\n\n    return parseInt(param)\n}\n\n\nconst useCustomMove = () => {\n\n\n      const navigate = useNavigate()\n\n      const [refresh, setRefresh] = useState(false)\n\n      const [queryParams] = useSearchParams()\n\n      const page = getNum(queryParams.get('page'), 1)\n      const size = getNum(queryParams.get('size'), 10)\n\n      const queryDefault = createSearchParams({page, size}).toString()\n\n      const moveToList = (pageParam) => {\n      console.log('moveToList called with: ', pageParam);\n        let queryStr = \"\"\n         if(pageParam){\n\n          const pageNum = getNum(pageParam.page, 1)\n          const sizeNum = getNum(pageParam.size, 10)\n\n          queryStr = createSearchParams({page:pageNum, size: sizeNum}).toString()\n      }  else {\n          queryStr = queryDefault\n         }\n\n         setRefresh(!refresh)\n\n       console.log('Navigating to: ', {pathname: '/list', search: queryStr}); // Check the navigate function\n       navigate({pathname: '/list', search: queryStr});\n      }\n\n\n     const moveToModify = useCallback((num) => {\n     console.log(queryDefault)\n     navigate({ pathname: `../modify/${num}`, search: queryDefault })\n     },[page,size])\n\n     const moveToRead = (userId) => {\n       console.log('userId:', userId); // userId 파라미터 로깅\n       console.log(queryDefault)\n       navigate({\n         pathname: `../read/${userId}`,\n         search: queryDefault\n       })\n     }\n\n     const moveToDashboard = () => {\n         navigate('/dashboard');\n       };\n\n\n     return {moveToList, moveToModify, moveToDashboard, moveToRead, page, size, refresh}\n   }\nexport default useCustomMove;"],"names":["prefix","concat","getList","async","page","size","pageParam","axios","get","params","data","AddComponent","order","setOrder","useState","orderedProducts","totalAmount","handleChangeOrder","e","name","value","target","prevOrder","result","setResult","moveToList","useCustomMove","_jsxs","Box","sx","m","children","_jsx","ResultModal","title","content","callbackFn","closeModal","_Fragment","TextField","label","variant","onChange","placeholder","fullWidth","margin","Button","onClick","products","split","map","id","index","Number","trim","amount","response","post","alert","window","location","href","console","log","error","AddPage","Container","maxWidth","initState","dtoList","pageNumList","pageRequestDTO","prev","next","totoalCount","prevPage","nextPage","totalPage","current","_ref","onRowClick","orderType","setOrderType","openModal","setOpenModal","selectedId","setSelectedId","moveToRead","refresh","serverData","setServerData","useParams","useNavigate","useEffect","then","catch","movePage","className","TableContainer","component","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","length","handleRowClick","style","cursor","product","totalPrice","colSpan","display","flexDirection","alignItems","p","justifyContent","color","pageNum","List","item","ListItem","ListItemText","primary","secondary","description","Modal","open","onClose","handleCloseModal","position","top","left","transform","width","height","overflow","bgcolor","ReadPage","ListPage","setOpen","queryParams","useSearchParams","ListComponent","mt","gap","FormControl","ml","InputLabel","Select","event","MenuProps","PaperProps","marginTop","borderColor","MenuItem","mr","handleOpen","handleClose","border","boxShadow","productIds","payload","put","ModifyComponent","manager","supplier","setSupplier","moveToModify","supplierResponse","fetchOrderDetails","Array","isArray","Date","toLocaleString","marginLeft","mname","mtel","price","marginBottom","src","itemImage","require","alt","marginRight","itemType","confirmOpen","setConfirmOpen","handleConfirmClose","modifyOpen","setModifyOpen","deleteOpen","setDeleteOpen","orderAssign","orderComplete","orderDelete","delete","Typography","gutterBottom","elevation","ReadComponent","mb","handleConfirmOpen","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","handleConfirmOrder","autoFocus","handleModifyOpen","type","handleModifyClose","ModifyPage","handleDelete","getNum","param","defaultValue","parseInt","navigate","setRefresh","queryDefault","createSearchParams","toString","queryStr","sizeNum","pathname","search","useCallback","num","moveToDashboard","userId"],"sourceRoot":""}