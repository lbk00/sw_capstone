{"version":3,"file":"static/js/277.0c2695e8.chunk.js","mappings":"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","sources":["components/ItemPurchase.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport defaultImage from \"../sample/sample1.png\"; // 기본 이미지 설정\r\n\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardMedia,\r\n    Divider,\r\n    Drawer,\r\n    FormControl,\r\n    Grid, Icon, InputAdornment,\r\n    InputLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n    OutlinedInput,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    Alert\r\n} from '@mui/material';\r\n\r\n\r\nexport default function ItemPurchase() {\r\n    const [anchorElUser, setAnchorElUser] = useState(null);\r\n    const [anchorElProduct, setAnchorElProduct] = useState(null);\r\n    const [anchorElOrdersheet, setAnchorElOrdersheet] = useState(null);\r\n    const [anchorElInventory, setAnchorElInventory] = useState(null);\r\n    const [anchorElSupplier, setAnchorElSupplier] = useState(null);\r\n\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = useState('');\r\n\r\n    const handleUserClick = (event) => {\r\n        setAnchorElUser(event.currentTarget);\r\n    };\r\n\r\n    const handleProductClick = (event) => {\r\n        setAnchorElProduct(event.currentTarget);\r\n    };\r\n\r\n    const handleOrdersheetClick = (event) => {\r\n        setAnchorElOrdersheet(event.currentTarget);\r\n    };\r\n\r\n    const handleInventoryClick = (event) => {\r\n        setAnchorElInventory(event.currentTarget);\r\n    };\r\n\r\n    const handleSupplierClick = (event) => {\r\n        setAnchorElSupplier(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseUser = () => {\r\n        setAnchorElUser(null);\r\n    };\r\n\r\n    const handleCloseProduct = () => {\r\n        setAnchorElProduct(null);\r\n    };\r\n\r\n    const handleCloseOrdersheet = () => {\r\n        setAnchorElOrdersheet(null);\r\n    };\r\n\r\n    const handleCloseInventory = () => {\r\n        setAnchorElInventory(null);\r\n    };\r\n\r\n    const handleCloseSupplier = () => {\r\n        setAnchorElSupplier(null);\r\n    };\r\n\r\n    const openUser = Boolean(anchorElUser);\r\n    const openProduct = Boolean(anchorElProduct);\r\n    const openOrdersheet = Boolean(anchorElOrdersheet);\r\n    const openInventory = Boolean(anchorElInventory);\r\n    const openSupplier = Boolean(anchorElSupplier);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const toggleDrawer = (newOpen) => () => {\r\n        setOpen(newOpen);\r\n    };\r\n\r\n    const [user, setUser] = useState(null);\r\n\r\n    // Axios 요청에 withCredentials 옵션 추가\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:8080/api/user/current-user', {\r\n                    withCredentials: true // 세션 쿠키 전달을 위한 설정\r\n                });\r\n                console.log(response.data); // 확인용 로그\r\n                setUser(response.data);\r\n                setIsLoggedIn(true); // 로그인 처리\r\n            } catch (error) {\r\n                console.error(\"사용자 정보 가져오기 오류:\", error);\r\n            }\r\n        };\r\n\r\n        fetchUser();\r\n    }, []);\r\n\r\n    const location = useLocation();\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(location.state);\r\n\r\n    // 상품 정보\r\n    const { productId } = useParams();\r\n    const [product, setProduct] = useState(null);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchProduct = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/products/${productId}`);\r\n                setProduct(response.data); // 받아온 데이터를 product 상태에 저장\r\n            } catch (error) {\r\n                console.error(\"Error fetching product data:\", error);\r\n            }\r\n        };\r\n        fetchProduct();\r\n    }, [productId]); // productId가 변경될 때마다 데이터를 가져온다\r\n\r\n\r\n\r\n    //로그인\r\n    {/*현재 로그인한 관리자 정보*/}\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:8080/api/user/current-user', {\r\n                    withCredentials: true // 세션 쿠키 전달을 위한 설정\r\n                });\r\n                console.log(response.data); // 확인용 로그\r\n                setUser(response.data);\r\n            } catch (error) {\r\n                setIsLoggedIn(false);\r\n            }\r\n        };\r\n\r\n        fetchUser();\r\n    }, []);\r\n\r\n    // 로그아웃 함수\r\n    const handleLogout = async () => {\r\n        try {\r\n            await axios.post('http://localhost:8080/api/user/logout', {}, { withCredentials: true });\r\n            window.location.href = \"/homeuser\"; // 페이지 새로고침\r\n            setIsLoggedIn(false); // 로그아웃 처리\r\n            sessionStorage.clear(); // sessionStorage 비우기\r\n        } catch (error) {\r\n            console.error(\"로그아웃 실패:\", error);\r\n        }\r\n    };\r\n\r\n    const handleLogin = () => {\r\n        navigate('/signin');  // 로그인 페이지 이동\r\n    };\r\n\r\n    const handleSignup = () => {\r\n        navigate('/signup');  // 회원가입 페이지 이동\r\n    };\r\n\r\n    const handleCart = () => {\r\n        navigate('/cart');  // 로그인 페이지 이동\r\n    };\r\n\r\n    const openManagerList = () => {\r\n        window.open('http://localhost:3000/dashboard', '_blank', 'noopener,noreferrer'); // 새로운 팝업 열기\r\n    };\r\n\r\n    // 장바구니 페이지로 상품 ID 전송\r\n    const navigate = useNavigate();\r\n    const handleAddToCart = () => {\r\n        if(isLoggedIn) {\r\n            const parsedQuantity = parseInt(quantity, 10);\r\n\r\n            // 수량 검증\r\n            if (isNaN(parsedQuantity) || parsedQuantity <= 0) {\r\n                setSnackbarMessage(\"유효한 수량을 입력하세요.\");\r\n                setOpenSnackbar(true);\r\n                return;\r\n            }\r\n\r\n            // 남은 수량 체크\r\n            if (parsedQuantity > product.amount) {\r\n                setSnackbarMessage(\"재고가 충분하지 않습니다.\");\r\n                setOpenSnackbar(true);\r\n                return;\r\n            }\r\n\r\n            // 장바구니 페이지로 product를 배열로 전달\r\n            const cartItem = {\r\n                id: product.id,\r\n                name: product.name,\r\n                price: product.price,\r\n                size: product.size,\r\n                itemImage: product.itemImage,\r\n                amount: parseInt(quantity, 10),\r\n            };\r\n\r\n            // 기존 장바구니 상품 가져오기 (없으면 빈 배열)\r\n            let cartItems = JSON.parse(sessionStorage.getItem('cartItems')) || [];\r\n            // 장바구니에 이미 있는지 확인\r\n            const existingItemIndex = cartItems.findIndex(item => item.id === product.id);\r\n\r\n            if (existingItemIndex > -1) {\r\n                // 이미 있는 경우, 수량 업데이트\r\n                cartItems[existingItemIndex].amount += cartItem.amount;\r\n\r\n            } else {\r\n                // 새로 추가\r\n                cartItems.push(cartItem);\r\n            }\r\n            // 세션 스토리지에 저장\r\n            sessionStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n            setSnackbarMessage(\"장바구니에 추가되었습니다.\");\r\n            setOpenSnackbar(true);\r\n            // 장바구니 페이지로 이동\r\n            navigate('/cart', {state: {cartItem}});\r\n        } else {\r\n            setSnackbarMessage(\"로그인 후 이용이 가능합니다.\");\r\n            setOpenSnackbar(true);\r\n\r\n        }\r\n    };\r\n\r\n    const DrawerList = (\r\n        <Box sx={{ width: 250 }} role=\"presentation\" onClick={toggleDrawer(false)}>\r\n            <List>\r\n                {['전체보기'].map((text, index) => (\r\n                    <ListItem key={text} disablePadding>\r\n                        <ListItemButton>\r\n                            <ListItemIcon>\r\n                                <MenuIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={text} />\r\n                        </ListItemButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {['상의','아우터','바지'].map((text, index) => (\r\n                    <ListItem key={text} disablePadding>\r\n                        <ListItemButton>\r\n                            <ListItemIcon>\r\n                                <MenuIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={text} />\r\n                        </ListItemButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n    );\r\n\r\n    const [option1, setOption1] = React.useState('');\r\n    const [option2, setOption2] = React.useState('');\r\n    const [option3, setOption3] = React.useState('');\r\n\r\n    const handleOption1Change = (event) => {\r\n        setOption1(event.target.value);\r\n    };\r\n\r\n    const handleOption2Change = (event) => {\r\n        setOption2(event.target.value);\r\n    };\r\n\r\n    const handleOption3Change = (event) => {\r\n        setOption3(event.target.value);\r\n    };\r\n\r\n    const [quantity, setQuantity] = useState(); // 기본 수량 설정\r\n\r\n    const handleQuantityChange = (event) => {\r\n        const value = event.target.value;\r\n        // 숫자만 입력받도록 설정 (0보다 작지 않도록)\r\n        if (value >= 0) {\r\n            setQuantity(value);\r\n        }\r\n    };\r\n\r\n    // 상품이 로드되기 전에는 product가 null이므로 초기 상태를 설정. 데이터가 준비되기 전에 로딩메시지를 표시하도록\r\n    if (!product) {\r\n        return <p>상품을 불러오는 중입니다...</p>; // 데이터가 로드 중일 때\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\" sx={{ bgcolor: 'white', color: 'black' }}>\r\n                {/*상단페이지*/}\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\r\n                        <Icon sx={{ mr: 1 }} />\r\n                    </IconButton>\r\n                    <Typography align=\"left\" variant=\"h6\" sx={{ flexGrow: 1 }}>\r\n                        메인페이지\r\n                    </Typography>\r\n                    {user && user.role === 2 && (\r\n                        <Button color=\"inherit\" sx={{ mr: 2 }} onClick={openManagerList}>\r\n                            관리자 페이지\r\n                        </Button>\r\n                    )}\r\n\r\n\r\n                    {isLoggedIn ? (\r\n                        <Avatar>{user.cname.charAt(0)}</Avatar> // 사용자의 이름의 첫 글자를 Avatar에 표시\r\n                    ) : (\r\n                        <h1></h1>\r\n                    )}\r\n                    {isLoggedIn ? ( // 로그인 여부에따라 버튼 다르게 뜨도록\r\n                        <>\r\n                            <Button color=\"inherit\" onClick={handleCart}>장바구니</Button>\r\n                            <Button color=\"inherit\" onClick={handleLogout}>로그아웃</Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button color=\"inherit\" onClick={handleLogin}>로그인</Button>\r\n                            <Button color=\"inherit\" onClick={handleSignup}>회원가입</Button>\r\n                        </>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Divider />\r\n            <AppBar position=\"static\" sx={{ bgcolor: 'white', color: 'black'}}>\r\n                <Toolbar>\r\n                    <div>\r\n                        <Button sx={{ color: 'black' }} onClick={toggleDrawer(true)}>\r\n                            <MenuIcon/>\r\n                        </Button>\r\n                        <Drawer open={open} onClose={toggleDrawer(false)}>\r\n                            {DrawerList}\r\n                        </Drawer>\r\n                    </div>\r\n\r\n                    <Button sx={{ width : 90, color: 'black' }}>상의</Button>\r\n                    <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\r\n                    <Button sx={{ width : 90, color: 'black' }}>아우터</Button>\r\n                    <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\r\n                    <Button sx={{ width : 90, color: 'black' }}>바지</Button>\r\n                    <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\r\n                    <Box sx={{ flexGrow: 1 }} />\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <FormControl sx={{ width: '25ch', bgcolor: 'white' }} size=\"small\">\r\n                            <OutlinedInput\r\n                                placeholder=\"검색어를 입력하세요\"\r\n                                sx={{\r\n                                    '& .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: 'red',\r\n                                        borderWidth: '2px',\r\n                                    },\r\n                                    '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: 'red',\r\n                                        borderWidth: '2px',\r\n                                    },\r\n                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: 'red',\r\n                                        borderWidth: '2px',\r\n                                    },\r\n                                }}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton edge=\"end\">\r\n                                            <SearchIcon />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                    </form>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Divider />\r\n            {/*상단과 여백을 위해 생성한 Box*/}\r\n            <Box sx={{ bgcolor: '#ffffff' , height : 50 }}></Box>\r\n            {/*상품 상세 페이지*/}\r\n            <Grid container spacing={0} justifyContent=\"center\" alignItems=\"center\">\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            {product && (\r\n                            <CardMedia\r\n                                sx={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    height: 500,\r\n                                    width: 500\r\n                                }}\r\n\r\n                                image={\r\n                                    product.itemImage\r\n                                        ? require(`../sample/${product.itemImage}`) // 템플릿 리터럴 사용 (백틱)\r\n                                        : require('../sample/sample1.png')  // 기본 이미지 경로\r\n                                }\r\n                                title={product.name}\r\n                            />\r\n                                )}\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <Card>\r\n                        <CardContent sx={{ height: 500, width: 400 }}>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {product.name}\r\n                            </Typography>\r\n                            <Typography variant=\"h5\">\r\n                                ₩ {product.price}\r\n                            </Typography>\r\n                            <Typography variant=\"h6\">\r\n                                사이즈 : {product.size}\r\n                            </Typography>\r\n                            <Typography variant=\"h6\" color=\"text.secondary\">\r\n                                남은 수량 : {product.amount}\r\n                            </Typography>\r\n                            <FormControl fullWidth sx={{ mt: 2 }}>\r\n                                <InputLabel\r\n                                    htmlFor=\"quantity-input\"\r\n                                    sx={{\r\n                                        color: 'gray',\r\n                                        '&.Mui-focused': {\r\n                                            color: 'gray',\r\n                                        },\r\n                                        display: quantity ? 'none' : 'block',\r\n                                    }}\r\n                                >\r\n                                    수량\r\n                                </InputLabel>\r\n                                <TextField\r\n                                    id=\"quantity-input\"\r\n                                    type=\"number\" // 숫자만 입력 가능\r\n                                    value={quantity}\r\n                                    onChange={handleQuantityChange}\r\n                                    sx={{\r\n                                        '& .MuiInputBase-input': {\r\n                                            color: 'gray',\r\n                                        },\r\n                                        '& .MuiOutlinedInput-notchedOutline': {\r\n                                            borderColor: 'gray',\r\n                                        },\r\n                                        '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                                            borderColor: 'gray',\r\n                                        },\r\n                                        '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                            borderColor: 'gray',\r\n                                        },\r\n                                        '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                            borderColor: 'gray', // 포커스 시 테두리 색상 회색\r\n                                        },\r\n                                    }}\r\n                                    InputProps={{\r\n                                        onFocus: (e) => e.target.select(), // 숫자 입력 시 포커스될 때 전체 선택\r\n                                    }}\r\n                                />\r\n                            </FormControl>\r\n\r\n                            <Grid container spacing={2} sx={{ mt: 2 }}>\r\n                                {/*구매하기 & 장바구니 버튼*/}\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{\r\n                                            bgcolor: 'gray',\r\n                                            color: 'white',\r\n                                            '&:hover': { bgcolor: 'gray' },\r\n                                        }}\r\n                                        onClick={handleAddToCart} // 장바구니 버튼 클릭 시 호출\r\n                                    >\r\n                                        구매하기\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        sx={{\r\n                                            borderColor: 'gray',\r\n                                            color: 'gray',\r\n                                            '&:hover': {\r\n                                                borderColor: 'gray',\r\n                                                color: 'gray',\r\n                                            },\r\n                                        }}\r\n                                        onClick={handleAddToCart} // 장바구니 버튼 클릭 시 호출\r\n                                    >\r\n                                        장바구니\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                autoHideDuration={6000}\r\n                //message={\"재고가 부족합니다.\"}\r\n                onClose={() => setOpenSnackbar(false)}\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} // Snackbar 위치 설정\r\n            >\r\n                <Alert onClose={() => setOpenSnackbar(false)} severity=\"warning\">\r\n                    {snackbarMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/*하단과 여백을 위해 생성한 Box*/}\r\n            <Box sx={{ bgcolor: '#ffffff' , height : 80 }}></Box>\r\n            <AppBar position=\"static\" sx={{ bgcolor: 'gray', color: 'black', height: 50 }}>\r\n                <Toolbar></Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["ItemPurchase","anchorElUser","setAnchorElUser","useState","anchorElProduct","setAnchorElProduct","anchorElOrdersheet","setAnchorElOrdersheet","anchorElInventory","setAnchorElInventory","anchorElSupplier","setAnchorElSupplier","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","open","setOpen","Boolean","React","toggleDrawer","newOpen","user","setUser","useEffect","async","response","axios","get","withCredentials","console","log","data","setIsLoggedIn","error","fetchUser","location","useLocation","isLoggedIn","state","productId","useParams","product","setProduct","concat","fetchProduct","navigate","useNavigate","handleAddToCart","parsedQuantity","parseInt","quantity","isNaN","amount","cartItem","id","name","price","size","itemImage","cartItems","JSON","parse","sessionStorage","getItem","existingItemIndex","findIndex","item","push","setItem","stringify","DrawerList","_jsxs","Box","sx","width","role","onClick","children","_jsx","List","map","text","index","ListItem","disablePadding","ListItemButton","ListItemIcon","MenuIcon","ListItemText","primary","Divider","option1","setOption1","option2","setOption2","option3","setOption3","setQuantity","className","AppBar","position","bgcolor","color","Toolbar","IconButton","edge","mr","Icon","Typography","align","variant","flexGrow","Button","openManagerList","window","Avatar","cname","charAt","_Fragment","handleCart","post","href","clear","handleLogin","handleSignup","Drawer","onClose","orientation","flexItem","noValidate","autoComplete","FormControl","OutlinedInput","placeholder","borderColor","borderWidth","endAdornment","InputAdornment","SearchIcon","height","Grid","container","spacing","justifyContent","alignItems","xs","sm","md","Card","CardContent","CardMedia","display","image","require","title","gutterBottom","component","fullWidth","mt","InputLabel","htmlFor","TextField","type","value","onChange","event","target","InputProps","onFocus","e","select","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","overridesResolver","props","styles","root","overflow","inProps","ref","useThemeProps","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","elevation","undefined"],"sourceRoot":""}